// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Song {
  id          String   @id @default(cuid())
  title       String
  artist      String
  album       String?
  genre       String?
  year        Int?
  duration    Int      // in seconds
  coverUrl    String
  audioUrl    String
  popularity  Int      @default(0)
  playCount   Int      @default(0)
  isLiked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  favorites    Favorite[]
  playHistory  PlayHistory[]

  @@map("songs")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  displayName String
  avatar      String?
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  playlists   Playlist[]
  favorites   Favorite[]
  playHistory PlayHistory[]

  @@map("users")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  isPublic    Boolean  @default(false)
  coverUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs       PlaylistSong[]

  @@map("playlists")
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  position   Int      @default(0)
  addedAt    DateTime @default(now())

  // Relations
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@map("favorites")
}

model PlayHistory {
  id                   String   @id @default(cuid())
  userId               String
  songId               String
  playedAt             DateTime @default(now())
  completedPercentage  Int      @default(0)

  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song                 Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("play_history")
}

model Genre {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String
  songCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("genres")
}
